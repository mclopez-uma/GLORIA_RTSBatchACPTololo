package eu.gloria.rt.worker.offshore.acp;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;

import javax.persistence.EntityManager;

import eu.gloria.rt.catalogue.Observer;
import eu.gloria.rt.db.scheduler.ObservingPlan;
import eu.gloria.rt.db.scheduler.ObservingPlanManager;
import eu.gloria.rt.db.scheduler.ObservingPlanState;
import eu.gloria.rt.db.util.DBUtil;
import eu.gloria.rt.exception.RTSchException;
import eu.gloria.rt.worker.offshore.acp.rtml.RtmlGenerator;
import eu.gloria.rt.worker.offshore.acp.rtml.RtmlGeneratorContext;
import eu.gloria.rt.worker.offshore.acp.web.ACPManager;
import eu.gloria.rt.worker.offshore.acp.web.RTMLUploader;
import eu.gloria.rti.sch.core.OffshorePluginPublisher;
import eu.gloria.rti.sch.core.OffshorePublisher;

public class OffshorePublisherACP extends OffshorePluginPublisher implements OffshorePublisher{

	@Override
	public void publish(String idOp) throws RTSchException {
		
		String xmlPath= getPropertyValueString("xmlPath");
		String opXSD = getPropertyValueString("opXSD");
		String filterMapping = getPropertyValueString("filterMapping");
		String acp_http_auth_user = getPropertyValueString("acp_http_auth_user");
		String acp_http_auth_pw = getPropertyValueString("acp_http_auth_pw");
		String acp_http_ip = getPropertyValueString("acp_http_ip");
		int acp_http_port = getPropertyValueInt("acp_http_port");
		String acp_http_base_url = getPropertyValueString("acp_http_base_url");
		int acp_gloria_project_id = getPropertyValueInt("acp_gloria_project_id");
		
		//String acp_http_rtml_upload_url = getPropertyValueString("acp_http_rtml_upload_url");
		
		double obs_altitude = getPropertyValueDouble("obs_altitude");
		double obs_latitude = getPropertyValueDouble("obs_latitude");
		double obs_longitude = getPropertyValueDouble("obs_longitude");
		
		Observer observer = new Observer();
		observer.setAltitude(obs_altitude);
		observer.setLatitude(obs_latitude);
		observer.setLongitude(obs_longitude);
		
		
		EntityManager em = DBUtil.getEntityManager();
		ObservingPlanManager manager = new ObservingPlanManager();
		
		ObservingPlan dbOp = null;
		
		try{
			
			DBUtil.beginTransaction(em);
			
			dbOp = manager.get(em, idOp);
			
			if (dbOp != null){
				
				try{
					
					eu.gloria.rti.sch.core.ObservingPlan op = new eu.gloria.rti.sch.core.ObservingPlan(xmlPath + dbOp.getFile() , opXSD);
					
					RtmlGeneratorContext context = new RtmlGeneratorContext();
					context.setOp(op);
					context.setProjectName("Gloria");
					context.setRequestUser("Administrador");
					context.setRequestEmail("your@email.here");
					context.setRequestDesc("Generated by GLORIA");
					context.loadFilterMapping(filterMapping);
					context.setRequestId(dbOp.getUuid());
					context.setObserver(observer);
					
					RtmlGenerator generator = new RtmlGenerator();
					String rtmlContent =  generator.generateRtml(context);
					
					String rtmlFile = xmlPath + dbOp.getUuid() + ".rtml";
					
					saveRTML(rtmlContent, rtmlFile);
					
					File rtml = new File(rtmlFile);
					
					if (rtml.exists()){
						
						//Send to ACP
						ACPManager acpManager = new ACPManager(acp_gloria_project_id, acp_http_base_url, acp_http_ip, acp_http_port, acp_http_auth_user, acp_http_auth_pw);
						acpManager.uploadRTML(rtmlFile);
						
						//Delete from disk
						//rtml.delete();
					}
					
					dbOp.setState(ObservingPlanState.OFFSHORE);
				
				}catch(Exception ex){
					
					ex.printStackTrace();
					
					dbOp.setState(ObservingPlanState.ERROR);
					dbOp.setComment("ERROR: " + ex.getMessage());
				}
				
			}else{
				
				throw new Exception("OffshorePublisherACP. The observing plan does not exist. ID=" + idOp);
				
			}
			
			DBUtil.commit(em);
			
		} catch (Exception ex) {
			
			DBUtil.rollback(em);
			throw new RTSchException(ex.getMessage());
			
		} finally {
			DBUtil.close(em);
		}
		
		
	}
	
	private void saveRTML(String rtmlContent, String rtmlFile) throws IOException{
		
	    File file = new File(rtmlFile);
	     
	    if (file.exists()) {
	    	file.delete();
	    }
		
	    
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "8859_1"));
		
		try{
			bw.write(rtmlContent);
		}finally{
			bw.close();
		}
		
	}

}
